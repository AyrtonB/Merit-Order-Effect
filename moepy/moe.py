# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/05-merit-order-effect.ipynb (unless otherwise specified).

__all__ = ['construct_df_pred', 'construct_pred_ts', 'calc_error_metrics', 'get_model_pred_ts']

# Cell
import pandas as pd
import numpy as np

import pickle
from sklearn import linear_model
from collections.abc import Iterable

import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

import FEAutils as hlp
from ipypb import track

from moepy import lowess, eda
from .surface import PicklableFunction

# Cell
def construct_df_pred(model_fp, x_pred=np.linspace(-2, 61, 631), dt_pred=pd.date_range('2009-01-01', '2020-12-29', freq='1D')):
    smooth_dates = pickle.load(open(model_fp, 'rb'))
    df_pred = smooth_dates.predict(x_pred=x_pred, dt_pred=dt_pred)
    df_pred.index = np.round(df_pred.index, 1)

    return df_pred

# Cell
def construct_pred_ts(s, df_pred):
    s_pred_ts = pd.Series(index=s.index, dtype='float64')

    for dt_idx, val in track(s.iteritems(), total=s.size):
        s_pred_ts.loc[dt_idx] = df_pred.loc[round(val, 1), dt_idx.strftime('%Y-%m-%d')]

    return s_pred_ts

# Cell
def calc_error_metrics(s_err, max_err_quantile=1):
    if s_err.isnull().sum() > 0:
        s_err = s_err.dropna()

    max_err_cutoff = s_err.abs().quantile(max_err_quantile)
    s_err = s_err[s_err.abs()<=max_err_cutoff]

    metrics = {
        'median_abs_err': s_err.abs().median(),
        'mean_abs_err': s_err.abs().mean(),
        'root_mean_square_error': np.sqrt((s_err**2).mean())
    }

    return metrics

# Cell
def get_model_pred_ts(s, model_fp):
    df_pred = construct_df_pred(model_fp)
    s_cleaned = s.dropna().loc[df_pred.columns.min():df_pred.columns.max()+pd.Timedelta(hours=23, minutes=30)]
    s_pred_ts = construct_pred_ts(s_cleaned, df_pred)

    return s_pred_ts